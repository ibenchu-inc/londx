version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  postgres:
    driver: ${VOLUMES_DRIVER}

services:
  redis:
    image: redis:alpine
    restart: always
    # ports:
    #   - "${VFAIR_REDIS_PORT}:6379"
    networks:
      - backend

  postgres:
    build:
      context: ./postgresql
      args:
      - PG_VERSION=10
    restart: always
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      #- ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
        - "${DB_POSTGRES_PORT}:5432"
    environment:
        - POSTGRES_DB=${DB_POSTGRES_DATABASE}
        - POSTGRES_USER=${DB_POSTGRES_USERNAME}
        - POSTGRES_PASSWORD=${DB_POSTGRES_PASSWORD}
    networks:
        - backend

  caddy:
    build:
      context: ./caddy
    restart: always
    volumes:
      - ${CADDY_FILE}:/etc/Caddyfile
      - ${APP_CODE_PATH_HOST}/ssl:/var/www/ssl
    ports:
      - "${HOST_HTTP_PORT}:80"
      - "${HOST_HTTPS_PORT}:443"
      - "${HOST_DEMO_PORT}:2015"
      - "${HOST_HTTP_PORT}:80/udp"
      - "${HOST_HTTPS_PORT}:443/udp"
      - "${HOST_DEMO_PORT}:2015/udp"
    networks:
      - frontend

  #  openresty:
  #    build:
  #      context: ./openresty
  #    volumes:
  #      # - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
  #      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
  #      - ${NGINX_SITES_PATH}:/etc/nginx/conf.d/
  #    ports:
  #      - "${NGINX_HOST_HTTP_PORT}:80"
  #      - "${NGINX_HOST_HTTPS_PORT}:443"
  #    networks:
  #      - frontend

  node1:
    build:
      context: ./nodejs
      args:
        - NODE_VERSION=${NODE_VERSION}
    restart: always
    volumes:
      - ${APP_CODE_PATH_HOST}/site1:/var/www
      - ${APP_CODE_PATH_HOST}/ssl:/var/www/ssl
    networks:
      - frontend
      - backend
    environment:
      - DB_TYPE=${DB_POSTGRES}
      - DB_HOST=${DB_POSTGRES_HOST}
      - DB_DATABASE=${DB_POSTGRES_DATABASE_SITE1}
      - DB_USERNAME=${DB_POSTGRES_USERNAME}
      - DB_PASSWORD=${DB_POSTGRES_PASSWORD}
      - NODE_ENV={NODE_ENV}

  node2:
    build:
      context: ./nodejs
      args:
        - NODE_VERSION=${NODE_VERSION}
    restart: always
    volumes:
      - ${APP_CODE_PATH_HOST}/site2:/var/www
      - ${APP_CODE_PATH_HOST}/ssl:/var/www/ssl
    networks:
      - frontend
      - backend
    environment:
      - DB_TYPE=${DB_POSTGRES}
      - DB_HOST=${DB_POSTGRES_HOST}
      - DB_DATABASE=${DB_POSTGRES_DATABASE_SITE2}
      - DB_USERNAME=${DB_POSTGRES_USERNAME}
      - DB_PASSWORD=${DB_POSTGRES_PASSWORD}
      - NODE_ENV={NODE_ENV}

  node1-dev:
    build:
      context: ./nodejs-dev
      args:
        - NODE_VERSION=${NODE_VERSION}
    restart: always
    volumes:
      - ${APP_CODE_PATH_HOST}/site1:/var/www
      - ${APP_CODE_PATH_HOST}/ssl:/var/www/ssl
    networks:
      - frontend
      - backend
    environment:
      - DB_TYPE=${DB_POSTGRES}
      - DB_HOST=${DB_POSTGRES_HOST}
      - DB_DATABASE=${DB_POSTGRES_DATABASE_SITE2}
      - DB_USERNAME=${DB_POSTGRES_USERNAME}
      - DB_PASSWORD=${DB_POSTGRES_PASSWORD}
      - NODE_ENV={NODE_ENV}

  workerspace:
    build:
      context: ./workerspace
      args:
        - NODE_VERSION=${NODE_VERSION}
    volumes:
      - ${APP_CODE_PATH_HOST}/:/var/www
    networks:
      - frontend
      - backend
    ports:
      - "${WORKSPACE_SSH_PORT}:22"
    tty: true
    environment:
      - DB_POSTGRES_HOST=${DB_POSTGRES_HOST}


